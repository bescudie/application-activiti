<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>Activiti</web>
  <name>TaskFormGenerator</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>Published.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1366582806000</creationDate>
  <date>1369859640000</date>
  <contentUpdateDate>1369859533000</contentUpdateDate>
  <version>1.1</version>
  <title>#if($task.getName())Task: $task.getName() with Description: $task.getDescription()#else Task Form Generator#end</title>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>Activiti.TaskFormGenerator</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>ef69f946-d157-4632-8140-4479821dd796</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>$$('input.required').each(function(element) {
new LiveValidation(element, {validMessage: 'Ok', failureMessage: "Supply a value!" }).add(Validate.Presence);
});</code>
    </property>
    <property>
      <name>validator</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <content>{{velocity}}
#if($isGuest)
  {{error}}You must be logged in{{/error}}
#else
    $request.getRequestURL()
  $request.getQueryString()
  $xwiki.get('jsfx').use('uicomponents/widgets/validation/livevalidation_prototype.js')
  $xwiki.get('ssfx').use('uicomponents/widgets/validation/livevalidation.css', true)
  ## We take from the request the parameters starting with "ActivitiFormProperty_"
  ## create a Map with them which we pass to the Activiti Engine
  #if($request.completeTask)
    #set($objectMap = {})
    #set($prefix='ActivitiFormProperty_')
    Prefix Length $prefix.length()
    #foreach($entry in $request.parameterMap.entrySet())
      $request.parameterMap.entrySet()
      #if($entry.key.startsWith($prefix))
        #set($propIdStart=$entry.key.lastIndexOf('_')+1)
        #set($propertyId=$entry.key.substring($propIdStart))
        ## if the value from request is empty string, don't add it to the Map
        ## It is useless to add an empty string, and it also breaks the required form property since empty string is considered a value
        ## thus form data can be submitted with empty values and Activiti will not throw an exception
        #if("$entry.value.get(0)" != "")
          #set($propertyValues = [])
          $property
          #set($discard=$objectMap.put($propertyId, $entry.value.get(0)))
        #end
      #end
    #end
    ## Map: $objectMap.entrySet()
    $services.activiti.form.submitTaskFormData($request.taskId, $objectMap)
    $response.sendRedirect($request.xredirect))
  #end
  #if($request.generateFormForTaskId)
    #set($taskId = $request.generateFormForTaskId)
    #if($taskId)
      #set($formProperties = $services.activiti.form.getTaskFormProperties("$taskId"))
      #set($task = $services.activiti.task.getTaskById($taskId))
      #set($executionId =  $task.getExecutionId())
      #if($task.getDueDate())
        Due Date: $task.getDueDate()
      #end
      ##
      ## Get the variables for this Execution and display them
      ##  so the users sees the input from the previous tasks
      ##
      #set($instanceVariables = $services.activiti.runtime.getVariables($executionId))
      #if(!$instanceVariables.isEmpty())

        {{html}}
          &lt;form class="xform" action="" name="form" id="ActivitiProcessVariableGenerator"&gt;
            &lt;dl&gt;
            #foreach($variable in $instanceVariables.entrySet())
              &lt;dt&gt;&lt;label for="ActivitiInstanceVariable_$variable.key"&gt;$variable.key&lt;/label&gt;&lt;/dt&gt;
              &lt;dd&gt;$instanceVariables.get($variable.key)&lt;/dd&gt;
            #end
            &lt;/dt&gt;
          &lt;/form&gt;
        {{/html}}
      #end
      ##
      ##
      ##  Since Properties from Activiti have several defined types, this macro generates
      ##  the corresponding HTML input element according to the internal data type which Activiti supports
      ##  Activiti internal data types: 
      ##  * string (org.activiti.engine.impl.form.StringFormType)
      ##  * long (org.activiti.engine.impl.form.LongFormType)
      ##  * enum (org.activiti.engine.impl.form.EnumFormType)
      ##  * date (org.activiti.engine.impl.form.DateFormType)
      ##  * boolean (org.activiti.engine.impl.form.BooleanFormType)   
      #macro(generateInput $property)
        #set($activitiPropertyTypeName = $property.getType().getName())
        #set($activitiPropertyRequired = $property.isRequired())
        &lt;dl&gt;
         &lt;dt&gt;
           &lt;label for="ActivitiFormProperty_$property.getId()"&gt;$property.getName()#if($activitiPropertyRequired)&lt;span class="xRequired"&gt;(Required)&lt;/span&gt;#end&lt;/label&gt;
         &lt;/dt&gt;
         &lt;dd&gt;
        #if($activitiPropertyTypeName == "string")
          &lt;input id="ActivitiFormProperty_$property.getId()" #if($activitiPropertyRequired)class="required"#end name="ActivitiFormProperty_$property.getId()" type="text" size="60"/&gt;
        #end
        #if($activitiPropertyTypeName == "long")
          ## The Activiti long type is actually not a String input, but a number input.
          ## Putting a non-number in this field will throw a cast exception
           &lt;input id="ActivitiFormProperty_$property.getId()" #if($activitiPropertyRequired)class="required"#end name="ActivitiFormProperty_$property.getId()" type="text" size="60"/&gt;
        #end
        #if($activitiPropertyTypeName == "enum")
          #set($enumValues = $property.getType().getInformation("values"))
          #foreach($enumValue in $enumValues.keySet())
            &lt;input type="radio" id="ActivitiFormProperty_$property.getId()" name="ActivitiFormProperty_$property.getId()" value="$enumValue" checked="yes"&gt; $enumValues.get("$enumValue") &lt;br&gt;
           ## &lt;input type="checkbox" name="ActivitiFormProperty_$property.getId()" value="$enumValue"&gt;$enumValues.get("$enumValue")&lt;br&gt;
          #end
        #end
        #if($activitiPropertyTypeName == "date")
          ## #set ($format = $property.getInformation($property.getType().getKey()))
          #set($xWikiDateFormat = $xwiki.getXWikiPreference('dateformat'))
          DateFormat $xWikiDateFormat
          #set ($format = 'dd/MM/yyyy')
          ## $property.getType()
          #set ($formattedValue = $escapetool.xml($datetool.format($format,$property.getValue())))
          ## $formattedValue
          ## A simple date picker widget.
          #set ($discard = $xwiki.ssfx.use('uicomponents/widgets/datepicker/calendarDateSelect.css', true))
          #set ($discard = $xwiki.jsfx.use('uicomponents/widgets/datepicker/calendarDateSelect.js', true))
          ## Used to parse and serialize the selected date using the date format specified in the XClass.
          #set ($discard = $xwiki.jsfx.use('uicomponents/widgets/datepicker/simpleDateFormat.js', true))
          ## A wrapper over the CalendarDateSelect widget that uses the SimpleDateFormat to parse/serialize the dates.
          #set ($discard = $xwiki.ssfx.use('uicomponents/widgets/datepicker/dateTimePicker.css', true))
          #set ($discard = $xwiki.jsfx.use('uicomponents/widgets/datepicker/dateTimePicker.js'))
          ## $property.getName()
          ## $property.getId()
          &lt;input type="text" id="ActivitiFormProperty_$property.getId()" class="datetime #if($activitiPropertyRequired)required#end" name="ActivitiFormProperty_$property.getId()" title="$!escapetool.xml($format)" value="$datetool.get("dd/MM/yyyy")/&gt;
           ## &lt;input type="text" id="$!id" name="$!id" value="2013/07/12" class="datetime t$!value.time" title="$!escapetool.xml($format)"/&gt;
        #end
        #if($activitiPropertyTypeName == "boolean")
          &lt;input id="ActivitiFormProperty_$property.getId()" name="ActivitiFormProperty_$property.getId()" type="radio" value="true" checked="checked"&gt;Yes&lt;br&gt;
          &lt;input id="ActivitiFormProperty_$property.getId()" name="ActivitiFormProperty_$property.getId()" type="radio" value="false"&gt;No
        #end
         &lt;/dd&gt;
         &lt;/dl&gt;
      #end##Macro End

      {{html}}
        &lt;form class="xform half" action="" name="form" id="ActivitiFormGenerator"&gt;
        &lt;input type="hidden" name="taskId" value="$taskId"/&gt;
        ## We get the value of the redirect and send it to the next form which will perform the redirect back to the user profile
        &lt;input type="hidden" name="xredirect" value="$request.xredirect"/&gt;
        #foreach($property in $formProperties)
         #generateInput($property)
        #end
        &lt;p class="buttons"&gt;
          &lt;span class="buttonwrapper"&gt;
            &lt;input class="button" type="submit" name="completeTask" value="Complete Task"/&gt;
          &lt;/span&gt;
        &lt;/p&gt;
        &lt;/form&gt;
      {{/html}}
    #else
      {{error}}No form Id received{{/error}}
    #end   
  #end
#end
{{/velocity}}</content>
</xwikidoc>
