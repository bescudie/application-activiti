<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>Activiti</web>
  <name>ActivitiAdmin</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>XWiki.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1366545229000</creationDate>
  <date>1369169897000</date>
  <contentUpdateDate>1369169896000</contentUpdateDate>
  <version>1.1</version>
  <title>ActivitiAdmin</title>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{velocity}}
#if($hasAdmin &amp;&amp; $xcontext.isMainWiki())
  #if($request.startProcessInstance)
    #set($discard = $services.activiti.runtime.startProcessInstanceById($request.startProcessInstance))
  #elseif($request.deleteProcessDefinition)
    #set($discard = $services.activiti.repository.deleteProcessDefinition($request.deleteProcessDefinition))
  #elseif($request.uploadProcessDefinition)
    ## $request.uploadProcessDefinition
    ## Uploads: $uploads
    ## Method: $xwiki.fileupload.getFileItems()
    #set($uploads = $xwiki.fileupload.getFileItems())
    #foreach ($upload in $xwiki.fileupload.getFileItems())
      $upload.getFieldName()
      #if($upload.getFieldName() == "filepath")
        $services.activiti.repository.uploadProcessDefinition("$upload.getName()", $upload.getInputStream())
        ## $response.sendRedirect($xwiki.getURL('XWiki.XWikiPreferences', 'admin', 'section=Activiti'))
        $response.sendRedirect($request.xredirect)
      #end
    #end
  #elseif($request.addMapping)
    #set($document = $xwiki.getDocument('Activiti.EventListenerMappingConfig'))
    #set($object = $document.newObject('Activiti.EventListenerMappingClass'))
    #set($event = $request.getParameter("event"))
    #set($space = $request.getParameter("space"))
    #set($message = $request.getParameter("message"))
    ## Handle Request
    Event: $event
    Space: $space
    Message: $message
    $object.set('event', $event)
    $object.set('space', $space)
    $object.set('message', $message)
    #set($discard=$document.save())
    ## $response.sendRedirect($doc.getURL())
    $response.sendRedirect($xwiki.getURL('XWiki.XWikiPreferences', 'admin', 'section=Activiti'))
  #elseif($request.deleteMapping)
    #set($document = $xwiki.getDocument('Activiti.EventListenerMappingConfig'))
    #set($object = $document.getObject('Activiti.EventListenerMappingClass', $mathtool.toInteger($request.deleteMapping)))
    $document.removeObject($object)
    $document.save()
    $response.sendRedirect($xwiki.getURL('XWiki.XWikiPreferences', 'admin', 'section=Activiti'))
  #end
  = Repository Information =
  {{info}}This section presents the Deployed Processes (BPMN 2.0) diagrams in the Activiti Engine{{/info}}
  #set($processes = $services.activiti.repository.getDeployedProcesses())
  (%style="width:99%"%)
  |=Deployment Information|=Process Information|=Process Description|=Actions|=Process Diagram
  #foreach($process in $processes)
    |Id: $process.getDeploymentId()
    Name: $!services.activiti.repository.getDeploymentName("$process.getDeploymentId()")|Version: $process.getVersion()
    Key: $process.getKey()
    Id: $process.getId()
    Name: $process.getName()
    File Name: $process.getResourceName() |$!process.getDescription()|((({{html}}
      &lt;form action="" method="post"&gt;
          &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
          &lt;input type="hidden" name="startProcessInstance" value="${process.getId()}" /&gt;
          &lt;!-- &lt;span class="buttonwrapper"&gt; --&gt;
            &lt;!-- Leave also the line for a regular form button --&gt;
            &lt;!-- &lt;input type="submit" value="Start Process Instance" class="button"/&gt; --&gt;
          &lt;!-- &lt;/span&gt; --&gt;
           &lt;div style="float:right"&gt;&lt;input type="image" src="$xwiki.getSkinFile('icons/silk/chart_organisation_add.png')" alt="Start Process" "title="Start Process"/&gt;&lt;/div&gt;
      &lt;/form&gt;
      &lt;form action="" method="post"&gt;
          &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
          &lt;input type="hidden" name="deleteProcessDefinition" value="${process.getId()}" /&gt;
          &lt;!-- &lt;span class="buttonwrapper"&gt; --&gt;
            &lt;!-- Leave also the line for a regular form button --&gt;
            &lt;!-- &lt;input type="submit" value="Delete Process" class="button"/&gt; --&gt;
          &lt;!-- &lt;/span&gt; --&gt;
        &lt;div&gt;&lt;input type="image" src="$xwiki.getSkinFile('icons/silk/chart_organisation_delete.png')" alt="Delete Process Definition" "title="Delete Process Definition" /&gt;&lt;/div&gt;
      &lt;/form&gt;
    {{/html}})))|(% style="text-align:center" %)[[image:icon:chart_organisation&gt;&gt;Activiti.ImageWriter||queryString="processId=$process.getId()" target="_blank"]]
  #end
  == Upload Process Diagram ==
  {{info}}You can upload a BPMN 2.0 diagram from here into the Activiti Engine{{/info}}

  {{html}}
  &lt;form class="xform" action="$xwiki.getURL("Activiti.ActivitiAdmin")" enctype="multipart/form-data" method="post"&gt;

      ## CSRF prevention
      &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
      &lt;input type="hidden" name="xredirect" value="$escapetool.xml($xwiki.getRelativeRequestURL())" /&gt;
      &lt;input type="hidden" name="uploadProcessDefinition" value="upload" /&gt;
        &lt;div class="fileupload-field"&gt;
          &lt;label class="hidden" for="xwikiuploadfile"&gt;$msg.get('core.viewers.attachments.upload.file')&lt;/label&gt;
          &lt;input id="xwikiuploadfile" type="file" name="filepath" value="upload" size="40" class="uploadFileInput"/&gt;
        &lt;div&gt;
        &lt;span class="buttonwrapper"&gt;&lt;input type="submit" value="$msg.get('core.viewers.attachments.upload.submit')" class="button"/&gt;&lt;/span&gt;
        &lt;span class="buttonwrapper"&gt;&lt;a class="cancel secondary button" href="$doc.getURL()"&gt;$msg.get('core.viewers.attachments.upload.cancel')&lt;/a&gt;&lt;/span&gt;
  &lt;/form&gt;
  {{/html}}
  = Runtime Information =
  == Active Instances ==
  {{info}}This section lists all the instances which are active state (in execution){{/info}}
  #set($runningInstances = $services.activiti.runtime.getProcessInstances())
  |= Process Definition Id|= Execution Id|= Suspended
  #foreach($instance in $runningInstances)
    |$instance.getProcessDefinitionId()|$instance.getId()|$instance.isSuspended()
  #end
  == Completed Process Instances ==
  #set($completedInstances = $services.activiti.history.getCompletedProcessInstances())
  #if(!$completedInstances.isEmpty())
  |= Process Definition Id|= Execution Id|=Date Started|= Date Completed|=Duration (miliseconds)|=Process Variables
  #foreach($instance in $completedInstances)
    #set($processVariables = $services.activiti.history.getHistoricaInstanceVariables($instance.getId()))
    |$instance.getProcessDefinitionId()|$instance.getId()|$instance.getStartTime()|$instance.getEndTime()|$instance.getDurationInMillis()|#foreach ($variable in $processVariables)$variable.getName(): $variable.getValue()#end
  ##Blank line left on purpose

  #end
  #else
    {{info}}No finished process instances{{/info}}
  #end
  
  = Task Service =
#set($activeTasks = $services.activiti.task.getUsersTasks())
#if(!$activeTasks.isEmpty())
  == Active Tasks ==
  |=(% style="width: 5%;" %)Task ID|=(% style="width: 15%;" %)Task Name|=(% style="width: 15%;" %)Task Assignee|=(% style="width: 15%;" %)Task Creation Time|=Task Description|=(% style="width: 10%;" %)Action
  #foreach($task in $activeTasks)
    |$task.getId()|$task.getName()|$!task.getAssignee()|$task.getCreateTime()|$task.getDescription()|[[Go to task&gt;&gt;Activiti.TaskFormGenerator||queryString="generateFormForTaskId=$task.getId()"]]
  #end
#else
  {{info}}No Active Tasks{{/info}}
#end

#set($candidateTasks = $services.activiti.task.getAllUnassignedUsersTasks())
== Candidate Tasks ==
#if(!$candidateTasks.isEmpty())
  |=(% style="width: 5%;" %)Task ID|=(% style="width: 15%;" %)Task Name|=(% style="width: 15%;" %)Task Creation Time|=Task Description|=(% style="width: 10%;" %)Action
  #foreach($task in $candidateTasks)
    |$task.getId()|$task.getName()|$task.getCreateTime()|$task.getDescription()|[[Claim&gt;&gt;Activiti.UserTasks||queryString="claimTask=$task.getId()"]]
  #end
#else
  {{info}}No Candidate Tasks{{/info}}
#end
#set($historicalTasks = $services.activiti.history.getAllUsersHistoryTasks())
== Completed Tasks ==
#if(!$historicalTasks.isEmpty())
  |=(% style="width: 5%;" %)Task ID|=(% style="width: 15%;" %)Task Name|=(% style="width: 15%;" %)Task Assignee|=(% style="width: 15%;" %)Task Start Time|=(% style="width: 15%;" %)Task End Time|=Task Description
  #foreach($task in $historicalTasks)
    |$task.getId()|$task.getName()|$task.getAssignee()|$task.getStartTime()|$task.getEndTime()|$task.getDescription()
  #end
#else
  {{info}}No history of previous tasks{{/info}}
#end


##List available Mappings
= Existing Mappings =
#set($document = $xwiki.getDocument('Activiti.EventListenerMappingConfig'))
#set($mappingObjects = $document.getObjects('Activiti.EventListenerMappingClass'))
#if(!$mappingObjects.isEmpty())
|=Event Type|=Listening in Space|=Message to send to Activiti Engine|=Delete Mapping
  #foreach($mapObject in $mappingObjects)
   |$mapObject.getProperty('event').getValue()|$mapObject.getProperty('space').getValue()|$mapObject.getProperty('message').getValue()|((({{html wiki="true"}}
   &lt;form action="" method="post" class="xform third" id="mapListener&gt;
      &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
      &lt;input type="hidden" name="xredirect" value="$escapetool.xml($xwiki.getRelativeRequestURL())" /&gt;
      &lt;input type="hidden" name="deleteMapping" value="$mapObject.getNumber()" /&gt;
      &lt;input type="image" src="$xwiki.getSkinFile('icons/silk/cross.png')" alt="Delete Mapping" "title="Delete Mapping"/&gt;&lt;/div&gt;
    &lt;/form&gt;
    {{/html}}
    )))
  #end
#end
= Add Mapping =
##Generate Custom Form
#set($discard=$doc.use($object))

{{html wiki="true"}}
&lt;form action="" method="post" class="xform third" id="mapListener&gt;
(((  
            ; &lt;label for="event"&gt;Event&lt;/label&gt;
              &lt;select id="event" name="event"&gt;
                &lt;option value="DocumentCreatedEvent"&gt;Document Created&lt;/option&gt;
                &lt;option value="DocumentDeletedEvent"&gt;Document Deleted&lt;/option&gt;
                &lt;option value="DocumentUpdatedEvent"&gt;Document Updated&lt;/option&gt;
            &lt;/select&gt; 

            ; &lt;label for="space"&gt;Space&lt;/label&gt;
              &lt;input id="space" class="suggestSpaces" type="text" id="space" name="space" autocomplete="off"&gt;

            ; &lt;label for="message"&gt;Message&lt;/label&gt;
              &lt;input id="message" type="text" id="message" name="message" &gt;

            &lt;div class="xform buttons"&gt;
            &lt;span class="buttonwrapper"&gt;&lt;input type="submit" name="addMapping" value="Add Mapping" class="button"/&gt;&lt;/span&gt;
            &lt;/div&gt;
)))
&lt;/form&gt;
{{/html}}
##
#else
  {{error}}Please access this page from the Administration section{{/error}}
#end
{{/velocity}}</content>
</xwikidoc>
